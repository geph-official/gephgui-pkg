name: CI

on:
  push:
    branches: [master, next]
    tags:
      - "v*.*.*"
  pull_request:
    branches: [master, next]

jobs:
  build_macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "recursive"
          fetch-depth: 0
      - name: Fetch all tags
        run: git fetch --tags --force
      - name: Set up Rust
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          rustup target add x86_64-apple-darwin
      # Cache Rust dependencies
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      # Cache NPM dependencies
      - uses: actions/cache@v3
        with:
          path: gephgui-wry/gephgui/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('gephgui-wry/gephgui/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
      - name: Build GUI
        run: |
          export VERSION=$(git describe --always)
          cd gephgui-wry/gephgui
          npm i -f
          npm run build
      - name: Build macOS
        run: |
          export VERSION=$(git describe --always)
          cd macos
          CARGO_BUILD_TARGET=x86_64-apple-darwin ./build-macos.bash
      - uses: actions/upload-artifact@v4
        with:
          name: geph-macos
          path: macos/geph-macos.zip

  build_flatpak:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "recursive"
          fetch-depth: 0
      - name: Fetch all tags
        run: git fetch --tags --force
      - name: Install dependencies
        run: |
          export VERSION=$(git describe --always)
          sudo apt update
          sudo apt install flatpak-builder flatpak ca-certificates
          git config --global protocol.file.allow always
      - name: Set up Flatpak
        run: |
          export VERSION=$(git describe --always)
          flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
      # Cache Flatpak build
      - uses: actions/cache@v3
        with:
          path: |
            ~/.local/share/flatpak
            ~/.cache/flatpak
            repo/
          key: ${{ runner.os }}-flatpak-${{ hashFiles('flatpak/io.geph.GephGui.yml') }}
          restore-keys: |
            ${{ runner.os }}-flatpak-
      - name: Build Flatpak
        run: |
          export VERSION=$(git describe --always)
          flatpak-builder --force-clean --install-deps-from flathub --user build-dir flatpak/io.geph.GephGui.yml --repo=repo
          flatpak build-bundle repo io.geph.GephGui.flatpak io.geph.GephGui --runtime-repo=https://flathub.org/repo/flathub.flatpakrepo
      - uses: actions/upload-artifact@v4
        with:
          name: geph-flatpak
          path: io.geph.GephGui.flatpak

  build_deb_oldubuntu:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "recursive"
          fetch-depth: 0
      - name: Fetch all tags
        run: git fetch --tags --force
      # Cache Rust dependencies
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-oldubuntu-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-oldubuntu-
      # Cache build dependencies
      - uses: actions/cache@v3
        with:
          path: |
            debian/.cargo
            debian/build-cache
          key: ${{ runner.os }}-deb-oldubuntu-${{ hashFiles('debian/**/*') }}
          restore-keys: |
            ${{ runner.os }}-deb-oldubuntu-
      - name: Build Debian package for old Ubuntu
        run: |
          export VERSION=$(git describe --always)
          chmod +x debian/build-deb-oldubuntu.sh
          ./debian/build-deb-oldubuntu.sh
      - name: Find Debian package
        id: find-deb
        run: |
          export VERSION=$(git describe --always)
          DEB_FILE=$(find . -name "*.deb" | head -n 1)
          echo "DEB_FILE=$DEB_FILE" >> $GITHUB_ENV
          echo "Found Debian package: $DEB_FILE"
      - uses: actions/upload-artifact@v4
        with:
          name: geph-deb-oldubuntu
          path: ${{ env.DEB_FILE }}

  build_windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "recursive"
          fetch-depth: 0
      - name: Fetch all tags
        run: git fetch --tags --force
      - name: dump out version
        run: git describe --always
      - name: Set up Rust
        run: |
          curl https://win.rustup.rs/ -o rustup-init.exe
          ./rustup-init -y --default-toolchain "stable-i686-pc-windows-msvc" --profile minimal
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      # Cache Rust dependencies
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      # Cache NPM dependencies
      - uses: actions/cache@v3
        with:
          path: gephgui-wry/gephgui/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('gephgui-wry/gephgui/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
      - name: Build GUI
        run: |
          $env:VERSION = $(git describe --always)
          cd gephgui-wry/gephgui
          npm i -f
          npm run build
      - name: Build Windows
        run: |
          $env:VERSION = $(git describe --always)
          $env:PATH += ";C:\Users\runneradmin\.cargo\bin"
          $env:CARGO_NET_GIT_FETCH_WITH_CLI = "true"
          bash windows/build-windows.bash
      - uses: actions/upload-artifact@v4
        with:
          name: geph-windows
          path: windows/Output/geph-windows-setup.exe

  create_github_release:
    runs-on: ubuntu-24.04
    needs: [build_macos, build_flatpak, build_windows, build_deb_oldubuntu]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: Find Debian package
        id: find-deb
        run: |
          export VERSION=$(git describe --always)
          DEB_FILE=$(find ./artifacts/geph-deb-oldubuntu -type f -name "*.deb" | head -n 1)
          echo "DEB_PATH=$DEB_FILE" >> $GITHUB_OUTPUT
          DEB_FILENAME=$(basename "$DEB_FILE")
          echo "DEB_FILENAME=$DEB_FILENAME" >> $GITHUB_OUTPUT
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: Geph ${{ github.ref_name }}
          draft: false
          prerelease: true
          files: |
            ./artifacts/geph-macos/geph-macos.zip
            ./artifacts/geph-flatpak/io.geph.GephGui.flatpak
            ./artifacts/geph-windows/geph-windows-setup.exe
            ${{ steps.find-deb.outputs.DEB_PATH }}
          generate_release_notes: false
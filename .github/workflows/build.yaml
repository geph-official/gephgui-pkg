name: CI

on:
  push:
    branches: [master, next]
    tags:
      - "v*.*.*"
  pull_request:
    branches: [master, next]

jobs:
  build_macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "recursive"
          fetch-depth: 0
      - name: Fetch all tags
        run: git fetch --tags --force
      - name: Set up Rust
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          rustup target add x86_64-apple-darwin
      - name: Build GUI
        run: |
          export VERSION=$(git describe --always)
          cd gephgui-wry/gephgui
          npm i -f
          npm run build
      - name: Build macOS
        run: |
          export VERSION=$(git describe --always)
          cd macos
          CARGO_BUILD_TARGET=x86_64-apple-darwin ./build-macos.bash
      - uses: actions/upload-artifact@v4
        with:
          name: geph-macos
          path: macos/geph-macos.zip

  build_flatpak:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "recursive"
          fetch-depth: 0
      - name: Fetch all tags
        run: git fetch --tags --force
      - name: Install dependencies
        run: |
          export VERSION=$(git describe --always)
          sudo apt update
          sudo apt install flatpak-builder flatpak ca-certificates
          git config --global protocol.file.allow always
      - name: Set up Flatpak
        run: |
          export VERSION=$(git describe --always)
          flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
      - name: Build Flatpak
        run: |
          export VERSION=$(git describe --always)
          flatpak-builder --force-clean --install-deps-from flathub --user build-dir flatpak/io.geph.GephGui.yml --repo=repo
          flatpak build-bundle repo io.geph.GephGui.flatpak io.geph.GephGui --runtime-repo=https://flathub.org/repo/flathub.flatpakrepo
      - uses: actions/upload-artifact@v4
        with:
          name: geph-flatpak
          path: io.geph.GephGui.flatpak

  build_deb_oldubuntu:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "recursive"
          fetch-depth: 0
      - name: Fetch all tags
        run: git fetch --tags --force
      - name: Build Debian package for old Ubuntu
        run: |
          export VERSION=$(git describe --always)
          chmod +x debian/build-deb-oldubuntu.sh
          ./debian/build-deb-oldubuntu.sh
      - name: Find Debian package
        id: find-deb
        run: |
          export VERSION=$(git describe --always)
          DEB_FILE=$(find . -name "*.deb" | head -n 1)
          echo "DEB_FILE=$DEB_FILE" >> $GITHUB_ENV
          echo "Found Debian package: $DEB_FILE"
      - uses: actions/upload-artifact@v4
        with:
          name: geph-deb-oldubuntu
          path: ${{ env.DEB_FILE }}

  build_windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "recursive"
          fetch-depth: 0
      - name: Fetch all tags
        run: git fetch --tags --force
      - name: dump out version
        run: git describe --always
      - name: Set up Rust
        run: |
          curl https://win.rustup.rs/ -o rustup-init.exe
          ./rustup-init -y --default-toolchain "stable-i686-pc-windows-msvc" --profile minimal
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      - name: Build GUI
        run: |
          $env:VERSION = $(git describe --always)
          cd gephgui-wry/gephgui
          npm i -f
          npm run build
      - name: Build Windows
        run: |
          $env:VERSION = $(git describe --always)
          $env:PATH += ";C:\Users\runneradmin\.cargo\bin"
          $env:CARGO_NET_GIT_FETCH_WITH_CLI = "true"
          bash windows/build-windows.bash
      - uses: actions/upload-artifact@v4
        with:
          name: geph-windows
          path: windows/Output/geph-windows-setup.exe

  # upload_artifacts:
  #   runs-on: ubuntu-24.04
  #   needs: [build_macos, build_flatpak, build_windows, build_deb_oldubuntu]
  #   steps:
  #     - name: Install rclone
  #       run: |
  #         export VERSION=$(git describe --always)
  #         curl https://rclone.org/install.sh | sudo bash
  #     - name: Configure rclone
  #       run: |
  #         export VERSION=$(git describe --always)
  #         mkdir -p ~/.config/rclone
  #         echo "[b2]" > ~/.config/rclone/rclone.conf
  #         echo "type = b2" >> ~/.config/rclone/rclone.conf
  #         echo "account = ${{ secrets.B2_KEYID }}" >> ~/.config/rclone/rclone.conf
  #         echo "key = ${{ secrets.B2_APPKEY }}" >> ~/.config/rclone/rclone.conf
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: ./artifacts
  #     - name: List downloaded artifacts
  #       run: |
  #         export VERSION=$(git describe --always)
  #         find ./artifacts -type f | sort
  #     - name: Upload macOS artifact to B2
  #       run: |
  #         export VERSION=$(git describe --always)
  #         rclone copyto ./artifacts/geph-macos/geph-macos.zip b2:geph-dl/NEXT/geph-macos.zip
  #     - name: Upload Flatpak artifact to B2
  #       run: |
  #         export VERSION=$(git describe --always)
  #         rclone copyto ./artifacts/geph-flatpak/io.geph.GephGui.flatpak b2:geph-dl/NEXT/Geph-x86_64.flatpak
  #     - name: Upload Windows artifact to B2
  #       run: |
  #         export VERSION=$(git describe --always)
  #         rclone copyto ./artifacts/geph-windows/geph-windows-setup.exe b2:geph-dl/NEXT/geph-windows-setup.exe
  #     - name: Upload Debian package to B2
  #       run: |
  #         export VERSION=$(git describe --always)
  #         DEB_FILE=$(find ./artifacts/geph-deb-oldubuntu -type f -name "*.deb" | head -n 1)
  #         if [ -n "$DEB_FILE" ]; then
  #           rclone copyto "$DEB_FILE" b2:geph-dl/NEXT/geph-ubuntu.deb
  #         else
  #           echo "No Debian package found"
  #           exit 1
  #         fi

  create_github_release:
    runs-on: ubuntu-24.04
    needs: [build_macos, build_flatpak, build_windows, build_deb_oldubuntu]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: Find Debian package
        id: find-deb
        run: |
          export VERSION=$(git describe --always)
          DEB_FILE=$(find ./artifacts/geph-deb-oldubuntu -type f -name "*.deb" | head -n 1)
          echo "DEB_PATH=$DEB_FILE" >> $GITHUB_OUTPUT
          DEB_FILENAME=$(basename "$DEB_FILE")
          echo "DEB_FILENAME=$DEB_FILENAME" >> $GITHUB_OUTPUT
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: Geph ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            ./artifacts/geph-macos/geph-macos.zip
            ./artifacts/geph-flatpak/io.geph.GephGui.flatpak
            ./artifacts/geph-windows/geph-windows-setup.exe
            ${{ steps.find-deb.outputs.DEB_PATH }}
          generate_release_notes: false
